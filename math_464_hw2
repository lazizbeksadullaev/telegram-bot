{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNzBVud9bDIFAvFw8iJcEX1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lazizbeksadullaev/telegram-bot/blob/main/math_464_hw2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LRtybT--DJxC",
        "outputId": "dd55c8ea-6298-4a5a-cabe-b437767ba83d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   delta  max obj funct                                   optimal solution\n",
            "0    0.5    1942.780702  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "1    0.6    1943.378947  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "2    0.7    1943.977193  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "3    0.8    1944.575439  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "4    0.9    1945.173684  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "5    1.0    1945.771930  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "6    1.1    1946.370175  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n",
            "7    1.2    1946.968421  [1.9824561403508771, 4.0, 0.0, 19.017543859649...\n"
          ]
        }
      ],
      "source": [
        "#!/usr/bin/env python3\n",
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Script to demonstrate how to solve small mixed integer programs\n",
        "using the python optimize module in the scipy package\n",
        "\"\"\"\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import scipy.optimize as opt\n",
        "\n",
        "# The problem we will solve is:\n",
        "#\n",
        "# max z = delta x1 + delta x2 +  74 x3 + 102 x4\n",
        "# s.t.    172 x1 +  60 x2 +  96 x3 +  48 x4 <= 2950\n",
        "#         144 x1 +  36 x2 +  54 x3 +  30 x4 >= 1000\n",
        "#         4.4 x1 - 5.4 x2 +11.9 x3 - 4.5 x4 <= 0\n",
        "#         2.4 x1 + 9.6 x2 -21.6 x3 - 2.0 x4 >= 0\n",
        "#             x1 +     x2 +     x3 +     x4  = 25\n",
        "#         x >= 0\n",
        "#         x1,x3,x4 in R\n",
        "#         x2 in Z import numpy as np\n",
        "\n",
        "delta_array = list()\n",
        "function_array = list()\n",
        "solution_array = list()\n",
        "\n",
        "for delta in np.arange(0.5, 1.3, 0.1):\n",
        "    # First build the objective vector.\n",
        "    delta_array.append(delta)\n",
        "    c = np.array([delta, delta, 74, 102])\n",
        "\n",
        "    # Next, create the coefficient array for the inequality constraints.\n",
        "    # Note that the inequalities must be Ax <= b, so some sign\n",
        "    # changes result when converting >= into <=.\n",
        "    A = np.array([[172, 60, 96, 48],\\\n",
        "                  [-144, -36, -54, -30],\\\n",
        "                  [4.4, -5.4, 11.9, -4.5],\\\n",
        "                  [-2.4, -9.6, 21.6, 2]])\n",
        "\n",
        "    # Next the right-hand-side vector for the inequalities\n",
        "    # Sign changes can occur here too.\n",
        "    b = np.array([2950, -1000, 0, 0])\n",
        "\n",
        "    # The coefficient matrix for the equality constraints and\n",
        "    # the right hand side vector.\n",
        "    Ae = np.ones((1, 4))  # Ae = [[1,1,1,1]]\n",
        "    be = np.array([25])\n",
        "\n",
        "    # Next, we provide any lower and upper bound vectors, one\n",
        "    # value for each decision variable.  In this example all\n",
        "    # lower bound are zero and there are no upper bounds.\n",
        "    bounds = ((0, np.inf), (0, np.inf), (0, np.inf), (0, np.inf))\n",
        "\n",
        "    # Lastly, we can specify which variables are required to be integer.\n",
        "    # If no variables are integer then isint=[];  In our example, only x2\n",
        "    # is integer.\n",
        "    isint = [0, 1, 0, 0]\n",
        "\n",
        "    # The call to the mixed integer solver looks like the following.\n",
        "    # Notice that we pass \"-c\" instead of \"c\" when we have a maximization\n",
        "    # problem.  This is because the solver is expecting a minimization.\n",
        "    res = opt.linprog(-c, A, b, Ae, be, bounds, integrality=isint)\n",
        "\n",
        "    # The result is stored in the dictionary variable \"res\".\n",
        "    # In particular, to show the optimal objective value and the\n",
        "    # optimal decision variable values:\n",
        "    function_array.append(np.dot(c, res['x']))\n",
        "    solution_array.append(res['x'])\n",
        "    # print(f\"When delta = {delta} max objective function z= {res['fun']}\")\n",
        "    # print(f\"When delta = {delta} optimal solution x* = {res['x']}\")\n",
        "    # print(f\"When delta = {delta} max objective function z = {np.dot(c, res['x'])}\")\n",
        "\n",
        "data1 = {\n",
        "       'delta':delta_array,\n",
        "       'max obj funct':function_array,\n",
        "       \"optimal solution\":solution_array\n",
        "        }\n",
        "df = pd.DataFrame(data=data1) # yuqoridagi df ham so'zsiz ishlaydi\n",
        "print(df)\n",
        "# print(res['x'])\n",
        "# print(np.dot(c, res['x']))\n",
        "# print(res)"
      ]
    }
  ]
}